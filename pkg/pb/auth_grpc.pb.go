// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// SignIn returns an access token as well as a refresh token from an email and
	// a password.
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// CheckSignUp indicates if the site is in "invitation only" mode. If it
	// returns true, then everyone can sign-up.
	CheckSignUp(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckSignUpResponse, error)
	// InviteSignUp sends an sign-up invitation code to an email address. Only
	// administrators can send such emails.
	InviteSignUp(ctx context.Context, in *InviteSignUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// VerifySignUp sends a verification code to an email address. This
	// verification code is required to sign-up. If the site is not in invite-only
	// mode, then everyone can send a verification code whatever the invitation
	// code they enter.
	VerifySignUp(ctx context.Context, in *VerifySignUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Signup creates a new user IF AND ONLY IF the invitation and activation
	// codes are correct. The invitation code is not required if the site IS NOT
	// in invite-only mode. The activation code can be obtained through the
	// SendSignUp method.
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// VerifyResetPwd sends a code to reset the password to an email address. This
	// code must be given to the ResetPwd method.
	VerifyResetPwd(ctx context.Context, in *VerifyResetPwdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CheckResetPwd checks if the code given by VerifyResetPwd is valid.
	CheckResetPwd(ctx context.Context, in *CheckResetPwdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ResetPwd resets the password associated to an email address. A code that
	// can be obtained through the SendResetPwd must be given in order to verify
	// the identity of the user.
	ResetPwd(ctx context.Context, in *ResetPwdRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// NewAccess generates a new access token from a refresh token.
	NewAccess(ctx context.Context, in *NewAccessRequest, opts ...grpc.CallOption) (*NewAccessResponse, error)
	// SignOut deletes the given refresh token. Warning: the issued access tokens
	// remain valid.
	SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetLocale replaces the current user locale by another.
	SetLocale(ctx context.Context, in *SetLocaleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetEmailInvite sends the verification code to the given email in order to
	// change it.
	SetEmailInvite(ctx context.Context, in *SetEmailInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetEmail replaces the current user email by another.
	SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckSignUp(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckSignUpResponse, error) {
	out := new(CheckSignUpResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/CheckSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) InviteSignUp(ctx context.Context, in *InviteSignUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.Auth/InviteSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) VerifySignUp(ctx context.Context, in *VerifySignUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.Auth/VerifySignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) VerifyResetPwd(ctx context.Context, in *VerifyResetPwdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.Auth/VerifyResetPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckResetPwd(ctx context.Context, in *CheckResetPwdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.Auth/CheckResetPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ResetPwd(ctx context.Context, in *ResetPwdRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/ResetPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) NewAccess(ctx context.Context, in *NewAccessRequest, opts ...grpc.CallOption) (*NewAccessResponse, error) {
	out := new(NewAccessResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/NewAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.Auth/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SetLocale(ctx context.Context, in *SetLocaleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.Auth/SetLocale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SetEmailInvite(ctx context.Context, in *SetEmailInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.Auth/SetEmailInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.Auth/SetEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// SignIn returns an access token as well as a refresh token from an email and
	// a password.
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// CheckSignUp indicates if the site is in "invitation only" mode. If it
	// returns true, then everyone can sign-up.
	CheckSignUp(context.Context, *emptypb.Empty) (*CheckSignUpResponse, error)
	// InviteSignUp sends an sign-up invitation code to an email address. Only
	// administrators can send such emails.
	InviteSignUp(context.Context, *InviteSignUpRequest) (*emptypb.Empty, error)
	// VerifySignUp sends a verification code to an email address. This
	// verification code is required to sign-up. If the site is not in invite-only
	// mode, then everyone can send a verification code whatever the invitation
	// code they enter.
	VerifySignUp(context.Context, *VerifySignUpRequest) (*emptypb.Empty, error)
	// Signup creates a new user IF AND ONLY IF the invitation and activation
	// codes are correct. The invitation code is not required if the site IS NOT
	// in invite-only mode. The activation code can be obtained through the
	// SendSignUp method.
	SignUp(context.Context, *SignUpRequest) (*SignInResponse, error)
	// VerifyResetPwd sends a code to reset the password to an email address. This
	// code must be given to the ResetPwd method.
	VerifyResetPwd(context.Context, *VerifyResetPwdRequest) (*emptypb.Empty, error)
	// CheckResetPwd checks if the code given by VerifyResetPwd is valid.
	CheckResetPwd(context.Context, *CheckResetPwdRequest) (*emptypb.Empty, error)
	// ResetPwd resets the password associated to an email address. A code that
	// can be obtained through the SendResetPwd must be given in order to verify
	// the identity of the user.
	ResetPwd(context.Context, *ResetPwdRequest) (*SignInResponse, error)
	// NewAccess generates a new access token from a refresh token.
	NewAccess(context.Context, *NewAccessRequest) (*NewAccessResponse, error)
	// SignOut deletes the given refresh token. Warning: the issued access tokens
	// remain valid.
	SignOut(context.Context, *SignOutRequest) (*emptypb.Empty, error)
	// SetLocale replaces the current user locale by another.
	SetLocale(context.Context, *SetLocaleRequest) (*emptypb.Empty, error)
	// SetEmailInvite sends the verification code to the given email in order to
	// change it.
	SetEmailInvite(context.Context, *SetEmailInviteRequest) (*emptypb.Empty, error)
	// SetEmail replaces the current user email by another.
	SetEmail(context.Context, *SetEmailRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthServer) CheckSignUp(context.Context, *emptypb.Empty) (*CheckSignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSignUp not implemented")
}
func (UnimplementedAuthServer) InviteSignUp(context.Context, *InviteSignUpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteSignUp not implemented")
}
func (UnimplementedAuthServer) VerifySignUp(context.Context, *VerifySignUpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignUp not implemented")
}
func (UnimplementedAuthServer) SignUp(context.Context, *SignUpRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthServer) VerifyResetPwd(context.Context, *VerifyResetPwdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyResetPwd not implemented")
}
func (UnimplementedAuthServer) CheckResetPwd(context.Context, *CheckResetPwdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckResetPwd not implemented")
}
func (UnimplementedAuthServer) ResetPwd(context.Context, *ResetPwdRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPwd not implemented")
}
func (UnimplementedAuthServer) NewAccess(context.Context, *NewAccessRequest) (*NewAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAccess not implemented")
}
func (UnimplementedAuthServer) SignOut(context.Context, *SignOutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedAuthServer) SetLocale(context.Context, *SetLocaleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocale not implemented")
}
func (UnimplementedAuthServer) SetEmailInvite(context.Context, *SetEmailInviteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmailInvite not implemented")
}
func (UnimplementedAuthServer) SetEmail(context.Context, *SetEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmail not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CheckSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckSignUp(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_InviteSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteSignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).InviteSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/InviteSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).InviteSignUp(ctx, req.(*InviteSignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_VerifySignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).VerifySignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/VerifySignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).VerifySignUp(ctx, req.(*VerifySignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_VerifyResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyResetPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).VerifyResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/VerifyResetPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).VerifyResetPwd(ctx, req.(*VerifyResetPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckResetPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CheckResetPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckResetPwd(ctx, req.(*CheckResetPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/ResetPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ResetPwd(ctx, req.(*ResetPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_NewAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).NewAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/NewAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).NewAccess(ctx, req.(*NewAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignOut(ctx, req.(*SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SetLocale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SetLocale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SetLocale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SetLocale(ctx, req.(*SetLocaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SetEmailInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmailInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SetEmailInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SetEmailInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SetEmailInvite(ctx, req.(*SetEmailInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SetEmail(ctx, req.(*SetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _Auth_SignIn_Handler,
		},
		{
			MethodName: "CheckSignUp",
			Handler:    _Auth_CheckSignUp_Handler,
		},
		{
			MethodName: "InviteSignUp",
			Handler:    _Auth_InviteSignUp_Handler,
		},
		{
			MethodName: "VerifySignUp",
			Handler:    _Auth_VerifySignUp_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Auth_SignUp_Handler,
		},
		{
			MethodName: "VerifyResetPwd",
			Handler:    _Auth_VerifyResetPwd_Handler,
		},
		{
			MethodName: "CheckResetPwd",
			Handler:    _Auth_CheckResetPwd_Handler,
		},
		{
			MethodName: "ResetPwd",
			Handler:    _Auth_ResetPwd_Handler,
		},
		{
			MethodName: "NewAccess",
			Handler:    _Auth_NewAccess_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _Auth_SignOut_Handler,
		},
		{
			MethodName: "SetLocale",
			Handler:    _Auth_SetLocale_Handler,
		},
		{
			MethodName: "SetEmailInvite",
			Handler:    _Auth_SetEmailInvite_Handler,
		},
		{
			MethodName: "SetEmail",
			Handler:    _Auth_SetEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
