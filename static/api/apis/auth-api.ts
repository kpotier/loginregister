/* tslint:disable */
/* eslint-disable */
/**
 * auth.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AuthCheckResetPwdRequest } from '../models';
import { AuthCheckSignUpResponse } from '../models';
import { AuthInviteSignUpRequest } from '../models';
import { AuthNewAccessRequest } from '../models';
import { AuthNewAccessResponse } from '../models';
import { AuthResetPwdRequest } from '../models';
import { AuthSetEmailInviteRequest } from '../models';
import { AuthSetEmailRequest } from '../models';
import { AuthSetLocaleRequest } from '../models';
import { AuthSignInRequest } from '../models';
import { AuthSignInResponse } from '../models';
import { AuthSignOutRequest } from '../models';
import { AuthVerifyResetPwdRequest } from '../models';
import { InviteCodeVerifyBody } from '../models';
import { RpcStatus } from '../models';
import { SignupInviteCodeBody } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CheckResetPwd checks if the code given by VerifyResetPwd is valid.
         * @param {AuthCheckResetPwdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheckResetPwd: async (body: AuthCheckResetPwdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authCheckResetPwd.');
            }
            const localVarPath = `/v1/auth/reset-password/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CheckSignUp indicates if the site is in \"invitation only\" mode. If it returns true, then everyone can sign-up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheckSignUp: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/sign-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary InviteSignUp sends an sign-up invitation code to an email address. Only administrators can send such emails.
         * @param {AuthInviteSignUpRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authInviteSignUp: async (body: AuthInviteSignUpRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authInviteSignUp.');
            }
            const localVarPath = `/v1/auth/sign-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary NewAccess generates a new access token from a refresh token.
         * @param {AuthNewAccessRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authNewAccess: async (body: AuthNewAccessRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authNewAccess.');
            }
            const localVarPath = `/v1/auth/access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ResetPwd resets the password associated to an email address. A code that can be obtained through the SendResetPwd must be given in order to verify the identity of the user.
         * @param {AuthResetPwdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPwd: async (body: AuthResetPwdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authResetPwd.');
            }
            const localVarPath = `/v1/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SetEmail replaces the current user email by another.
         * @param {AuthSetEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSetEmail: async (body: AuthSetEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authSetEmail.');
            }
            const localVarPath = `/v1/auth/set-email/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SetEmailInvite sends the verification code to the given email in order to change it.
         * @param {AuthSetEmailInviteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSetEmailInvite: async (body: AuthSetEmailInviteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authSetEmailInvite.');
            }
            const localVarPath = `/v1/auth/set-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SetLocale replaces the current user locale by another.
         * @param {AuthSetLocaleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSetLocale: async (body: AuthSetLocaleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authSetLocale.');
            }
            const localVarPath = `/v1/auth/set-locale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SignIn returns an access token as well as a refresh token from an email and a password.
         * @param {AuthSignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignIn: async (body: AuthSignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authSignIn.');
            }
            const localVarPath = `/v1/auth/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SignOut deletes the given refresh token. Warning: the issued access tokens remain valid.
         * @param {AuthSignOutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignOut: async (body: AuthSignOutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authSignOut.');
            }
            const localVarPath = `/v1/auth/sign-out`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signup creates a new user IF AND ONLY IF the invitation and activation codes are correct. The invitation code is not required if the site IS NOT in invite-only mode. The activation code can be obtained through the SendSignUp method.
         * @param {SignupInviteCodeBody} body 
         * @param {string} inviteCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignUp: async (body: SignupInviteCodeBody, inviteCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authSignUp.');
            }
            // verify required parameter 'inviteCode' is not null or undefined
            if (inviteCode === null || inviteCode === undefined) {
                throw new RequiredError('inviteCode','Required parameter inviteCode was null or undefined when calling authSignUp.');
            }
            const localVarPath = `/v1/auth/sign-up/{inviteCode}`
                .replace(`{${"inviteCode"}}`, encodeURIComponent(String(inviteCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary VerifyResetPwd sends a code to reset the password to an email address. This code must be given to the ResetPwd method.
         * @param {AuthVerifyResetPwdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyResetPwd: async (body: AuthVerifyResetPwdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authVerifyResetPwd.');
            }
            const localVarPath = `/v1/auth/reset-password/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary VerifySignUp sends a verification code to an email address. This verification code is required to sign-up. If the site is not in invite-only mode, then everyone can send a verification code whatever the invitation code they enter.
         * @param {InviteCodeVerifyBody} body 
         * @param {string} inviteCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifySignUp: async (body: InviteCodeVerifyBody, inviteCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authVerifySignUp.');
            }
            // verify required parameter 'inviteCode' is not null or undefined
            if (inviteCode === null || inviteCode === undefined) {
                throw new RequiredError('inviteCode','Required parameter inviteCode was null or undefined when calling authVerifySignUp.');
            }
            const localVarPath = `/v1/auth/sign-up/{inviteCode}/verify`
                .replace(`{${"inviteCode"}}`, encodeURIComponent(String(inviteCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CheckResetPwd checks if the code given by VerifyResetPwd is valid.
         * @param {AuthCheckResetPwdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCheckResetPwd(body: AuthCheckResetPwdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authCheckResetPwd(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary CheckSignUp indicates if the site is in \"invitation only\" mode. If it returns true, then everyone can sign-up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCheckSignUp(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuthCheckSignUpResponse>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authCheckSignUp(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary InviteSignUp sends an sign-up invitation code to an email address. Only administrators can send such emails.
         * @param {AuthInviteSignUpRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authInviteSignUp(body: AuthInviteSignUpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authInviteSignUp(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary NewAccess generates a new access token from a refresh token.
         * @param {AuthNewAccessRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authNewAccess(body: AuthNewAccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuthNewAccessResponse>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authNewAccess(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ResetPwd resets the password associated to an email address. A code that can be obtained through the SendResetPwd must be given in order to verify the identity of the user.
         * @param {AuthResetPwdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authResetPwd(body: AuthResetPwdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuthSignInResponse>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authResetPwd(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary SetEmail replaces the current user email by another.
         * @param {AuthSetEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSetEmail(body: AuthSetEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authSetEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary SetEmailInvite sends the verification code to the given email in order to change it.
         * @param {AuthSetEmailInviteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSetEmailInvite(body: AuthSetEmailInviteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authSetEmailInvite(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary SetLocale replaces the current user locale by another.
         * @param {AuthSetLocaleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSetLocale(body: AuthSetLocaleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authSetLocale(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary SignIn returns an access token as well as a refresh token from an email and a password.
         * @param {AuthSignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignIn(body: AuthSignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuthSignInResponse>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authSignIn(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary SignOut deletes the given refresh token. Warning: the issued access tokens remain valid.
         * @param {AuthSignOutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignOut(body: AuthSignOutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authSignOut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Signup creates a new user IF AND ONLY IF the invitation and activation codes are correct. The invitation code is not required if the site IS NOT in invite-only mode. The activation code can be obtained through the SendSignUp method.
         * @param {SignupInviteCodeBody} body 
         * @param {string} inviteCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignUp(body: SignupInviteCodeBody, inviteCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuthSignInResponse>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authSignUp(body, inviteCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary VerifyResetPwd sends a code to reset the password to an email address. This code must be given to the ResetPwd method.
         * @param {AuthVerifyResetPwdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyResetPwd(body: AuthVerifyResetPwdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authVerifyResetPwd(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary VerifySignUp sends a verification code to an email address. This verification code is required to sign-up. If the site is not in invite-only mode, then everyone can send a verification code whatever the invitation code they enter.
         * @param {InviteCodeVerifyBody} body 
         * @param {string} inviteCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifySignUp(body: InviteCodeVerifyBody, inviteCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authVerifySignUp(body, inviteCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary CheckResetPwd checks if the code given by VerifyResetPwd is valid.
         * @param {AuthCheckResetPwdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCheckResetPwd(body: AuthCheckResetPwdRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return AuthApiFp(configuration).authCheckResetPwd(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CheckSignUp indicates if the site is in \"invitation only\" mode. If it returns true, then everyone can sign-up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCheckSignUp(options?: AxiosRequestConfig): Promise<AxiosResponse<AuthCheckSignUpResponse>> {
            return AuthApiFp(configuration).authCheckSignUp(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary InviteSignUp sends an sign-up invitation code to an email address. Only administrators can send such emails.
         * @param {AuthInviteSignUpRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authInviteSignUp(body: AuthInviteSignUpRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return AuthApiFp(configuration).authInviteSignUp(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary NewAccess generates a new access token from a refresh token.
         * @param {AuthNewAccessRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authNewAccess(body: AuthNewAccessRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthNewAccessResponse>> {
            return AuthApiFp(configuration).authNewAccess(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ResetPwd resets the password associated to an email address. A code that can be obtained through the SendResetPwd must be given in order to verify the identity of the user.
         * @param {AuthResetPwdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authResetPwd(body: AuthResetPwdRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthSignInResponse>> {
            return AuthApiFp(configuration).authResetPwd(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SetEmail replaces the current user email by another.
         * @param {AuthSetEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSetEmail(body: AuthSetEmailRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return AuthApiFp(configuration).authSetEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SetEmailInvite sends the verification code to the given email in order to change it.
         * @param {AuthSetEmailInviteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSetEmailInvite(body: AuthSetEmailInviteRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return AuthApiFp(configuration).authSetEmailInvite(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SetLocale replaces the current user locale by another.
         * @param {AuthSetLocaleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSetLocale(body: AuthSetLocaleRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return AuthApiFp(configuration).authSetLocale(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SignIn returns an access token as well as a refresh token from an email and a password.
         * @param {AuthSignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignIn(body: AuthSignInRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthSignInResponse>> {
            return AuthApiFp(configuration).authSignIn(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SignOut deletes the given refresh token. Warning: the issued access tokens remain valid.
         * @param {AuthSignOutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignOut(body: AuthSignOutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return AuthApiFp(configuration).authSignOut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Signup creates a new user IF AND ONLY IF the invitation and activation codes are correct. The invitation code is not required if the site IS NOT in invite-only mode. The activation code can be obtained through the SendSignUp method.
         * @param {SignupInviteCodeBody} body 
         * @param {string} inviteCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignUp(body: SignupInviteCodeBody, inviteCode: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthSignInResponse>> {
            return AuthApiFp(configuration).authSignUp(body, inviteCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary VerifyResetPwd sends a code to reset the password to an email address. This code must be given to the ResetPwd method.
         * @param {AuthVerifyResetPwdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyResetPwd(body: AuthVerifyResetPwdRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return AuthApiFp(configuration).authVerifyResetPwd(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary VerifySignUp sends a verification code to an email address. This verification code is required to sign-up. If the site is not in invite-only mode, then everyone can send a verification code whatever the invitation code they enter.
         * @param {InviteCodeVerifyBody} body 
         * @param {string} inviteCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifySignUp(body: InviteCodeVerifyBody, inviteCode: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return AuthApiFp(configuration).authVerifySignUp(body, inviteCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary CheckResetPwd checks if the code given by VerifyResetPwd is valid.
     * @param {AuthCheckResetPwdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authCheckResetPwd(body: AuthCheckResetPwdRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return AuthApiFp(this.configuration).authCheckResetPwd(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary CheckSignUp indicates if the site is in \"invitation only\" mode. If it returns true, then everyone can sign-up.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authCheckSignUp(options?: AxiosRequestConfig) : Promise<AxiosResponse<AuthCheckSignUpResponse>> {
        return AuthApiFp(this.configuration).authCheckSignUp(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary InviteSignUp sends an sign-up invitation code to an email address. Only administrators can send such emails.
     * @param {AuthInviteSignUpRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authInviteSignUp(body: AuthInviteSignUpRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return AuthApiFp(this.configuration).authInviteSignUp(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary NewAccess generates a new access token from a refresh token.
     * @param {AuthNewAccessRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authNewAccess(body: AuthNewAccessRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuthNewAccessResponse>> {
        return AuthApiFp(this.configuration).authNewAccess(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ResetPwd resets the password associated to an email address. A code that can be obtained through the SendResetPwd must be given in order to verify the identity of the user.
     * @param {AuthResetPwdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authResetPwd(body: AuthResetPwdRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuthSignInResponse>> {
        return AuthApiFp(this.configuration).authResetPwd(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary SetEmail replaces the current user email by another.
     * @param {AuthSetEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authSetEmail(body: AuthSetEmailRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return AuthApiFp(this.configuration).authSetEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary SetEmailInvite sends the verification code to the given email in order to change it.
     * @param {AuthSetEmailInviteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authSetEmailInvite(body: AuthSetEmailInviteRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return AuthApiFp(this.configuration).authSetEmailInvite(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary SetLocale replaces the current user locale by another.
     * @param {AuthSetLocaleRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authSetLocale(body: AuthSetLocaleRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return AuthApiFp(this.configuration).authSetLocale(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary SignIn returns an access token as well as a refresh token from an email and a password.
     * @param {AuthSignInRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authSignIn(body: AuthSignInRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuthSignInResponse>> {
        return AuthApiFp(this.configuration).authSignIn(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary SignOut deletes the given refresh token. Warning: the issued access tokens remain valid.
     * @param {AuthSignOutRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authSignOut(body: AuthSignOutRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return AuthApiFp(this.configuration).authSignOut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Signup creates a new user IF AND ONLY IF the invitation and activation codes are correct. The invitation code is not required if the site IS NOT in invite-only mode. The activation code can be obtained through the SendSignUp method.
     * @param {SignupInviteCodeBody} body 
     * @param {string} inviteCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authSignUp(body: SignupInviteCodeBody, inviteCode: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuthSignInResponse>> {
        return AuthApiFp(this.configuration).authSignUp(body, inviteCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary VerifyResetPwd sends a code to reset the password to an email address. This code must be given to the ResetPwd method.
     * @param {AuthVerifyResetPwdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authVerifyResetPwd(body: AuthVerifyResetPwdRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return AuthApiFp(this.configuration).authVerifyResetPwd(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary VerifySignUp sends a verification code to an email address. This verification code is required to sign-up. If the site is not in invite-only mode, then everyone can send a verification code whatever the invitation code they enter.
     * @param {InviteCodeVerifyBody} body 
     * @param {string} inviteCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authVerifySignUp(body: InviteCodeVerifyBody, inviteCode: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return AuthApiFp(this.configuration).authVerifySignUp(body, inviteCode, options).then((request) => request(this.axios, this.basePath));
    }
}
